op <- par(pty="s")
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(tennisTrain$Result)],
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain,
mtry = 2, ntree = 500, nodesize=9, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff")],
mtry = 2, ntree = 500, nodesize=9, proximity=TRUE)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 500, nodesize=9, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 500, nodesize=9, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 500, nodesize=9, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 500, nodesize=9, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 500, nodesize=9, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 500, nodesize=9, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
MDSplot(model, as.factor(tennisTrain$Result), k=2)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=9, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
MDSplot(model, as.factor(tennisTrain$Result))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
MDSplot(model, as.factor(tennisTrain$Result))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
varImpPlot(model)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
plot(margin(model))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
plot(margin(model))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
set.seed(1)
plot(margin(model))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
set.seed(1)
plot(margin(model,as.factor(tennisTrain$Result)))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
set.seed(1)
margin(model,as.factor(tennisTrain$Result))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
set.seed(1)
margin(model)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
plot(outlier(model), type="h",
col=c("red", "green", "blue")[as.factor(tennisTrain$Result)])
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
plot(outlier(model), type="h",
col=c("red", "green", "blue")[as.factor(tennisTrain$Result)])
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
plot(outlier(model), type="h",
col=c("red", "blue")[as.factor(tennisTrain$Result)])
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
partialPlot(model, tennisTrain, ACEdiff, "1")
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
op <- par(mfrow=c(2, 2))
for (i in vars) {
partialPlot(model, tennisTrain, vars[i], "1")
partialPlot(model, tennisTrain, vars[i], "0")
} par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
op <- par(mfrow=c(2, 2))
for (i in vars) {
partialPlot(model, tennisTrain, i, "1")
partialPlot(model, tennisTrain, i , "0")
} par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
op <- par(mfrow=c(2, 2))
for (i in vars) {
partialPlot(model, tennisTrain, i, "1")
partialPlot(model, tennisTrain, i , "0")
}
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
op <- par(mfrow=c(2, 2))
for (i in vars) {
partialPlot(model, tennisTrain, "ACEdiff", "1")
partialPlot(model, tennisTrain, "UFEdiff" , "0")
}
par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(size(vars), size(class)))
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in (length(vars))) {
for (j in (length(vars))) {
partialPlot(model, tennisTrain, "ACEdiff", "1")
partialPlot(model, tennisTrain, "UFEdiff" , "0")
}
}
par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in (length(vars))) {
for (j in (length(vars))) {
partialPlot(model, tennisTrain, vars[i], class[j])
}
}
par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in (length(vars))) {
for (j in (length(vars))) {
partialPlot(model, tennisTrain, vars[i], class[j],
main=paste("Partial Dependence on", vars[i]))
}
}
par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in (length(vars)+1)) {
for (j in (length(class)+1)) {
partialPlot(model, tennisTrain, vars[i], class[j],
main=paste("Partial Dependence on", vars[i]))
}
}
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
## Do MDS on 1 - proximity:
model.mds <- cmdscale(1 - model$proximity, eig=TRUE)
op <- par(pty="s")
model.mds$points
pairs(cbind(tennisTrain[,c("ACEdiff","UFEdiff")], model.mds$points), cex=0.6, gap=0,
col=c("red", "blue")[as.factor(tennisTrain$Result)],
main="Tennis Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(model.mds$GOF)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in (length(vars))) {
print(i)
for (j in (length(class))) {
partialPlot(model, tennisTrain, vars[i], class[j],
main=paste("Partial Dependence on", vars[i]))
}
}
par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in 1:length(vars)) {
print(i)
for (j in 1:length(class)) {
partialPlot(model, tennisTrain, vars[i], class[j],
main=paste("Partial Dependence on", vars[i]))
}
}
par(op)
runApp()
runApp()
runApp()
runApp()
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in 1:length(vars)) {
print(i)
for (j in 1:length(class)) {
partialPlot(model, tennisTrain, vars[i], class[j],
main=paste("Partial Dependence on", vars[i]))
}
}
par(op)
#The best model is
model <-  randomForest(as.factor(Result) ~ ACEdiff + UFEdiff, data=tennisTrain[,c("ACEdiff","UFEdiff","Result")],
mtry = 2, ntree = 200, nodesize=10, importance=TRUE, proximity=TRUE)
vars = c("ACEdiff","UFEdiff")
class = c("0","1")
op <- par(mfrow=c(length(vars), length(class)))
for (i in 1:length(vars)) {
print(i)
for (j in 1:length(class)) {
partialPlot(model, tennisTrain, vars[i], class[j],
main=paste("Partial Dependence on", vars[i]))
}
}
par(op)
