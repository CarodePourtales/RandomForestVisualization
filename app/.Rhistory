runApp()
runApp()
runApp()
runApp()
No
i am a student in IT
library(shiny); runApp('main.R')
runApp('main.R')
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
h2("Some measures : "),
fluidRow(
column(8, wellPanel(p(renderText("confusionmatrix")))),
column(8, wellPanel(p(renderText("accuracy_rate")))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2")))),
renderText("sensitivity"),
renderText("specificity"),
renderText("precision"),
renderText("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
h2("Some measures : "),
fluidRow(
column(8, wellPanel(p(renderText("confusionmatrix")))),
column(8, wellPanel(renderText("accuracy_rate"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2")))),
renderText("sensitivity"),
renderText("specificity"),
renderText("precision"),
renderText("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
ui_model_result <- mainPanel(
tabsetPanel(
tabPanel("Summary", ui_model_result_summary),
tabPanel("Prediction and accruracy", ui_model_result_prediction)
))
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
h2("Some measures : "),
fluidRow(
column(8, wellPanel(p(renderText("confusionmatrix")))),
column(8, wellPanel(renderText("accuracy_rate"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2")))),
renderText("sensitivity"),
renderText("specificity"),
renderText("precision"),
renderText("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"),
splitLayout(cellWidths = c("50%", "50%"),
plotOutput("prediction"),
plotOutput("missclassified_prediction")
))
)
runApp('main.R')
)
)
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
h2("Some measures : "),
fluidRow(
column(8, wellPanel(p(renderText("confusionmatrix")))),
column(8, wellPanel(renderText("accuracy_rate")))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2")))),
renderText("sensitivity"),
renderText("specificity"),
renderText("precision"),
renderText("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
h2("Some measures : "),
fluidRow(
column(8, wellPanel(p(renderText("confusionmatrix")))),
column(8, wellPanel(p(renderText("accuracy_rate")))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2")))),
renderText("sensitivity"),
renderText("specificity"),
renderText("precision"),
renderText("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
h2("Some measures : "),
fluidRow(
column(8, renderText("confusionmatrix")),
column(8, wellPanel(p(renderText("accuracy_rate")))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2"))),
column(8, wellPanel(p("Column width 2")))),
renderText("sensitivity"),
renderText("specificity"),
renderText("precision"),
renderText("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
runApp('main.R')
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
fluidRow(
column(8, verbatimTextOutput("confusionmatrix")),
column(10, wellPanel(p("Column width 10")))),
h2("Some measures : "),
verbatimTextOutput("confusionmatrix"),
verbatimTextOutput("accuracy_rate"),
verbatimTextOutput("sensitivity"),
verbatimTextOutput("specificity"),
verbatimTextOutput("precision"),
verbatimTextOutput("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
ui_model_result <- mainPanel(
tabsetPanel(
tabPanel("Summary", ui_model_result_summary),
tabPanel("Prediction and accruracy", ui_model_result_prediction)
))
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
fluidRow(
column(8, verbatimTextOutput("confusionmatrix")),
column(10, wellPanel(p("Column width 10")))),
h2("Some measures : "),
verbatimTextOutput("confusionmatrix"),
verbatimTextOutput("accuracy_rate"),
verbatimTextOutput("sensitivity"),
verbatimTextOutput("specificity"),
verbatimTextOutput("precision"),
verbatimTextOutput("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
runApp('main.R')
runApp('main.R')
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
column(6,plotOutput(outputId="prediction", width="500px",height="400px")),
h2("Some measures : "),
verbatimTextOutput("confusionmatrix"),
verbatimTextOutput("accuracy_rate"),
verbatimTextOutput("sensitivity"),
verbatimTextOutput("specificity"),
verbatimTextOutput("precision"),
verbatimTextOutput("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
"main panel",
column(6,textOutput(outputId="confusionmatrix")),
h2("Some measures : "),
verbatimTextOutput("confusionmatrix"),
verbatimTextOutput("accuracy_rate"),
verbatimTextOutput("sensitivity"),
verbatimTextOutput("specificity"),
verbatimTextOutput("precision"),
verbatimTextOutput("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
"main panel",
fluidRow(
splitLayout(cellWidths = c("50%", "50%"), plotOutput("prediction"), plotOutput("missclassified_prediction"))),
h2("Some measures : "),
verbatimTextOutput("confusionmatrix"),
verbatimTextOutput("accuracy_rate"),
verbatimTextOutput("sensitivity"),
verbatimTextOutput("specificity"),
verbatimTextOutput("precision"),
verbatimTextOutput("fmesure"),
h2("Some calculations : "),
h3("AIC "),
h2("Predictions"),
plotOutput("prediction"),
h2("Missclassified predictions"),
plotOutput("missclassified_prediction"))
)
ui_model_result <- mainPanel(
tabsetPanel(
tabPanel("Summary", ui_model_result_summary),
tabPanel("Prediction and accruracy", ui_model_result_prediction)
))
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
fluidRow(
column(6,verbatimTextOutput(outputId="confusionmatrix")),
column(6,verbatimTextOutput(outputId="accuracy_rate")),
column(6,verbatimTextOutput(outputId="sensitivity")),
column(6,verbatimTextOutput(outputId="specificity")),
column(6,verbatimTextOutput(outputId="precision")),
column(6,verbatimTextOutput(outputId="fmesure")),
splitLayout(cellWidths = c("50%", "50%"), plotOutput("prediction"), plotOutput("missclassified_prediction"))
),
)
)
runApp('main.R')
ui_model_result_prediction <- sidebarLayout(
sidebarPanel(
uiOutput('axis_x'),
uiOutput('axis_y'),
actionButton(
inputId = "submit_loc2",
label = "Submit"
)
),
mainPanel(
fluidRow(
column(5,verbatimTextOutput(outputId="confusionmatrix")),
column(5,verbatimTextOutput(outputId="accuracy_rate")),
column(5,verbatimTextOutput(outputId="sensitivity")),
column(5,verbatimTextOutput(outputId="specificity")),
column(5,verbatimTextOutput(outputId="precision")),
column(5,verbatimTextOutput(outputId="fmesure"))
),
fluidRow(
splitLayout(cellWidths = c("50%", "50%"), plotOutput("prediction"), plotOutput("missclassified_prediction"))
)
)
)
ui_model_result <- mainPanel(
tabsetPanel(
tabPanel("Summary", ui_model_result_summary),
tabPanel("Prediction and accruracy", ui_model_result_prediction)
))
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp()
runApp()
#UI model Result - Caroline de POURTALES
install.packages("shinydashboard")
ui_model_result_summary <- sidebarLayout(
sidebarPanel(
uiOutput('class'),
uiOutput('predictors'),
sliderInput('ntree','Number of trees',min=10,max=1000,value=200,step=10),
sliderInput('mtry','Number of trial at each node to choose one',min=1,max=20,value=2,step=1),
sliderInput('nodesize','Maximal depth',min=1,max=50,value=10,step=1),
actionButton(
inputId = "submit_loc",
label = "Submit"
)
),
mainPanel(
h2("Model summary"),
verbatimTextOutput("randomForest")
)
)
ui_model_result_summary <- sidebarLayout(
sidebarPanel(
uiOutput('class'),
uiOutput('predictors'),
sliderInput('ntree','Number of trees',min=10,max=1000,value=200,step=10),
sliderInput('mtry','Number of trial at each node to choose one',min=1,max=20,value=2,step=1),
sliderInput('nodesize','Maximal depth',min=1,max=50,value=10,step=1),
actionButton(
inputId = "submit_loc",
label = "Submit"
)
),
mainPanel(
h2("Model summary"),
verbatimTextOutput("randomForest")
)
)
#UI model Result - Caroline de POURTALES
install.packages("shinydashboard")
#UI model Result - Caroline de POURTALES
install.packages("shinydashboard")
install.packages("shinydashboard")
library(knitr)
knitr::opts_chunk$set(echo = TRUE,tidy=TRUE,message=FALSE,warning=FALSE,strip.white=TRUE,prompt=FALSE,
cache=TRUE, size="scriptsize",fig.width=6, fig.height=5)
library(reticulate)
#use_python("/Library/Frameworks/Python.framework/Versions/3.6/bin/python3", required = T)
knitr::knit_engines$set(python.reticulate =  TRUE)
#py_install("matplotlib")
py_install("scikit-learn")
install.packages("shinydashboard")
library(magrittr)
library(knitr)
library(rmarkdown)
library(ggplot2)
library(ggfortify)
library(MASS)
library(dplyr)
library(ISLR)
install.packages("shinydashboard")
library(magrittr)
library(knitr)
library(rmarkdown)
library(ggplot2)
library(ggfortify)
library(MASS)
library(dplyr)
library(ISLR)
install.packages("shiny")
library(magrittr)
library(knitr)
library(rmarkdown)
library(ggplot2)
library(ggfortify)
library(MASS)
library(dplyr)
library(ISLR)
install.packages("shiny")
library(shiny); runApp('main.R')
runApp('main.R')
runApp()
runApp()
runApp('main.R')
runApp('main.R')
install.packages("fresh")
runApp('main.R')
library(shiny); runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
library(shiny); runApp('main.R')
runApp()
runApp('main.R')
runApp()
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
runApp('main.R')
